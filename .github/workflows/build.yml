name: Build
on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened]
env:
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: ${{ env.SONAR_TOKEN == '' && 1 || 0 }}  # Shallow clones should be disabled for a better relevancy of SonarCloud analysis
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle', 'gradle.properties', 'gradle/libs.versions.toml', 'gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Cache Sonar packages
        uses: actions/cache@v2
        if: ${{ steps.check-secret.outputs.is_SONAR_TOKEN_set }}
        with:
          path: |
            ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache node distribution
        uses: actions/cache@v2
        with:
          path: |
            **/.node
          key: ${{ runner.os }}-node-${{ hashFiles('gradle.properties') }}
          restore-keys: ${{ runner.os }}-node
      - name: Cache yarn packages
        uses: actions/cache@v2
        with:
          path: |
            **/.yarn/cache
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: ${{ runner.os }}-yarn
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Gradle build (no Sonar set)
        if: ${{ env.SONAR_TOKEN == '' }}
        run: |
          gradle jibBuildTar
          ./gradlew build -Pci --info
        env:
          LISTEN_HOST: http://asdf-1751104278.us-east-1.elb.amazonaws.com/
          LISTEN_PORT: 8090
      - name: Upload S3
        uses: shallwefootball/s3-upload-action@master
        id: S3
        with:
          aws_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
          aws_bucket: refinery-fe
          source_dir: '/home/runner/work/refinery/refinery/subprojects/frontend/build'
          
      - name: Load tar to docker and push to registry
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: refinery
          IMAGE_TAG: latest
          LOADED_IMAGE: refinery-language-web:0.0.0-SNAPSHOT
        run: |
          docker image load --input /home/runner/work/refinery/refinery/subprojects/language-web/build/jib-image.tar
          docker image tag $LOADED_IMAGE $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
      

